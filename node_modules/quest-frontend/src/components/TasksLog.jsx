import React, { useState } from "react";
import "./TasksLog.css";
const API_PREFIX = "http://localhost:5000";

const TasksLog = () => {
  // Helper function to get the formatted date for today
  const getFormattedDate = () => {
    const date = new Date();
    return date.toDateString(); // e.g., "Sat Nov 30 2024"
  };

  const initialTasks = {
    [getFormattedDate()]: [], // Today
  };

  const [tasks, setTasks] = useState(initialTasks);
  const [newTask, setNewTask] = useState("");

  // Function to add a task to the current date
  const addTask = async () => {
    const token = localStorage.getItem("token"); // Retrieve the token from localStorage

    if (!token) {
      console.error("No token found, please log in first");
      return;
    }

    if (!newTask.trim()) {
      console.error("Task description cannot be empty");
      return;
    }

    const taskToAdd = {
      task: newTask,
      completed: false,
      xp: 5,
      date: getFormattedDate(), // Use the current date for the task
    };

    try {
      const response = await fetch(`${API_PREFIX}/api/tasks`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`, // Include token in the Authorization header
        },
        body: JSON.stringify({
          task: taskToAdd.task, // Only task is provided by the user
          xp: taskToAdd.xp, // Task XP
          date: taskToAdd.date, // Current date
        }),
      });

      const data = await response.json();
      if (response.ok) {
        const formattedDate = getFormattedDate();
        setTasks((prevTasks) => ({
          ...prevTasks,
          [formattedDate]: [...(prevTasks[formattedDate] || []), taskToAdd],
        }));
        setNewTask(""); // Clear the input after adding the task
        console.log("Task added successfully");
      } else {
        console.error("Error adding task:", data.message);
      }
    } catch (error) {
      console.error("Error adding task:", error);
    }
  };

  const toggleTaskCompletion = (day, index) => {
    const updatedTasks = [...tasks[day]];
    updatedTasks[index].completed = !updatedTasks[index].completed;
    setTasks((prevTasks) => ({ ...prevTasks, [day]: updatedTasks }));
  };

  const deleteTask = (day, index) => {
    const updatedTasks = tasks[day].filter((_, i) => i !== index);
    setTasks((prevTasks) => ({ ...prevTasks, [day]: updatedTasks }));
  };

  const totalXP = Object.values(tasks).reduce((acc, dayTasks) => {
    return (
      acc +
      dayTasks.reduce((dayAcc, task) => {
        return dayAcc + (task.completed ? task.xp : 0);
      }, 0)
    );
  }, 0);

  return (
    <div className="tasks-log">
      <div className="header">
        <h1>Total XP: {totalXP}</h1>
      </div>
      <div className="scroll-container">
        {Object.keys(tasks).map((day) => (
          <div className="day-column" key={day}>
            <h3>{day}</h3>
            <ul>
              {tasks[day].map((task, index) => (
                <li key={index} className={task.completed ? "completed" : ""}>
                  <input
                    type="checkbox"
                    checked={task.completed}
                    onChange={() => toggleTaskCompletion(day, index)}
                  />
                  {task.task} - {task.xp} XP
                  <button onClick={() => deleteTask(day, index)}>Delete</button>
                </li>
              ))}
            </ul>
            <div className="add-task">
              <input
                type="text"
                placeholder={`Add task to ${day}`}
                value={newTask}
                onChange={(e) => setNewTask(e.target.value)}
              />
              <button onClick={addTask}>Add</button>
            </div>
          </div>
        ))}
      </div>
      <div className="scroll-effect">
        <div className="scroll-knob"></div>
      </div>
    </div>
  );
};

export default TasksLog;
